import globals.Globals
import static globals.SinteringGlobals.*

import static gregtech.api.unification.material.Materials.*;
import gregtech.api.unification.material.MarkerMaterials;
import static gregtech.api.unification.ore.OrePrefix.dye;

DT = recipemap('distillation_tower')
ROASTER = recipemap('roaster')
VACUUM_DT = recipemap('vacuum_distillation')
CRYSTALLIZER = recipemap('crystallizer')
EXTRACTOR = recipemap('extractor')
ROTARY_KILN = recipemap('rotary_kiln')
COKING = recipemap('coking_tower')
CSTR = recipemap('continuous_stirred_tank_reactor')
CRACKER = recipemap('cracker')
EBF = recipemap('electric_blast_furnace')
REFORMER = recipemap('catalytic_reformer_recipes')
REACTION_FURNACE = recipemap('reaction_furnace')
FBR = recipemap('fixed_bed_reactor')
SIFTER = recipemap('sifter')
ALLOY_SMELTER = recipemap('alloy_smelter')
BCR = recipemap('bubble_column_reactor')
TBR = recipemap('trickle_bed_reactor')
LCR = recipemap('large_chemical_reactor')
AUTOCLAVE = recipemap('autoclave')
HEAT_EXCHANGER = recipemap('heat_exchanger')
UV_LIGHT_BOX = recipemap('uv_light_box')
BR = recipemap('batch_reactor')

// Sour gas processing

CENTRIFUGE.recipeBuilder()
.fluidInputs(fluid('sour_gas') * 3000)
.fluidInputs(fluid('ethanolamine_mix') * 1000)
.fluidOutputs(fluid('hydrogen') * 1000)
.fluidOutputs(fluid('rich_amine') * 1000)
.duration(40)
.EUt(120)
.buildAndRegister()

CENTRIFUGE.recipeBuilder()
.fluidInputs(fluid('rich_amine') * 1000)
.fluidOutputs(fluid('hydrogen_sulfide') * 1000)
.fluidOutputs(fluid('ethanolamine_mix') * 1000)
.duration(10)
.EUt(120)
.buildAndRegister()

REACTION_FURNACE.recipeBuilder()
.fluidInputs(fluid('hydrogen_sulfide') * 3000)
.fluidInputs(fluid('oxygen') * 3000)
.fluidOutputs(fluid('uncatalyzed_sulfurous_gases') * 3000)
.outputs(metaitem('dustSulfur'))
.duration(150)
.EUt(30)
.buildAndRegister()

REACTION_FURNACE.recipeBuilder()
.fluidInputs(fluid('hydrogen_sulfide') * 3000)
.fluidInputs(fluid('air') * 9000)
.fluidOutputs(fluid('uncatalyzed_sulfurous_gases') * 3000)
.outputs(metaitem('dustSulfur'))
.duration(150)
.EUt(30)
.buildAndRegister()

REACTION_FURNACE.recipeBuilder()
.notConsumable(metaitem('catalystBedAlumina'))
.fluidInputs(fluid('uncatalyzed_sulfurous_gases') * 3000)
.fluidOutputs(fluid('steam') * 2000)
.outputs(metaitem('dustSulfur') * 2)
.duration(150)
.EUt(30)
.buildAndRegister()

// Cracking: Ethane, Propane Butane

ROASTER.recipeBuilder()
.fluidInputs(fluid('ethane') * 1000)
.fluidInputs(fluid('steam') * 1000)
.fluidOutputs(fluid('steamcracked_ethane') * 700)
.duration(300)
.EUt(Globals.voltAmps[1])
.buildAndRegister()

ROASTER.recipeBuilder()
.fluidInputs(fluid('propane') * 1000)
.fluidInputs(fluid('steam') * 1000)
.fluidOutputs(fluid('steamcracked_propane') * 700)
.duration(300)
.EUt(Globals.voltAmps[1])
.buildAndRegister()

ROASTER.recipeBuilder()
.fluidInputs(fluid('butane') * 1000)
.fluidInputs(fluid('steam') * 1000)
.fluidOutputs(fluid('steamcracked_butane') * 700)
.duration(300)
.EUt(Globals.voltAmps[1])
.buildAndRegister()

CRACKER.recipeBuilder()
        .fluidInputs(fluid('ethane') * 1000)
        .fluidInputs(fluid('steam') * 1000)
        .fluidOutputs(fluid('steamcracked_ethane') * 1000)
        .duration(80)
        .EUt(Globals.voltAmps[2])
        .buildAndRegister()

CRACKER.recipeBuilder()
        .fluidInputs(fluid('propane') * 1000)
        .fluidInputs(fluid('steam') * 1000)
        .fluidOutputs(fluid('steamcracked_propane') * 1000)
        .duration(80)
        .EUt(Globals.voltAmps[2])
        .buildAndRegister()

CRACKER.recipeBuilder()
        .fluidInputs(fluid('butane') * 1000)
        .fluidInputs(fluid('steam') * 1000)
        .fluidOutputs(fluid('steamcracked_butane') * 1000)
        .duration(80)
        .EUt(Globals.voltAmps[2])
        .buildAndRegister()

DT.recipeBuilder()
        .fluidInputs(fluid('steamcracked_ethane') * 1000)
        .fluidOutputs(fluid('butadiene') * 50)
        .fluidOutputs(fluid('propene') * 50)
        .fluidOutputs(fluid('ethylene') * 800)
        .fluidOutputs(fluid('methane') * 50)
        .fluidOutputs(fluid('hydrogen') * 50)
        .duration(160)
        .EUt(Globals.voltAmps[1] * 2)
        .buildAndRegister()

DT.recipeBuilder()
        .fluidInputs(fluid('steamcracked_propane') * 1000)
        .fluidOutputs(fluid('butadiene') * 50)
        .fluidOutputs(fluid('propene') * 150)
        .fluidOutputs(fluid('ethylene') * 500)
        .fluidOutputs(fluid('methane') * 150)
        .fluidOutputs(fluid('hydrogen') * 150)
        .duration(160)
        .EUt(Globals.voltAmps[1] * 2)
        .buildAndRegister()

DT.recipeBuilder()
        .fluidInputs(fluid('steamcracked_butane') * 1000)
        .fluidOutputs(fluid('butadiene') * 150)
        .fluidOutputs(fluid('propene') * 250)
        .fluidOutputs(fluid('ethylene') * 350)
        .fluidOutputs(fluid('methane') * 150)
        .fluidOutputs(fluid('hydrogen') * 100)
        .duration(160)
        .EUt(Globals.voltAmps[1] * 2)
        .buildAndRegister()

// Refinery Gas Distillation

DT.recipeBuilder()
.fluidInputs(fluid('refinery_gas') * 1000)
.fluidOutputs(fluid('butane') * 100)
.fluidOutputs(fluid('propane') * 100)
.fluidOutputs(fluid('ethane') * 100)
.fluidOutputs(fluid('methane') * 750)
.duration(100)
.EUt(Globals.voltAmps[1] * 2)
.buildAndRegister()

// Kerosene, naphtha and gasoline cracking

// Cracking

fractions.each { _, fraction -> {

        if (fraction instanceof OilFractionCrackable) {

            CRACKER.recipeBuilder()
            .fluidInputs(fraction.get(1000))
            .fluidInputs(fluid('hydrogen') * 1000)
            .fluidOutputs(fraction.getLightlyHydro(1000))
            .duration(200)
            .EUt(Globals.voltAmps[1] * 2)
            .buildAndRegister()
            
            CRACKER.recipeBuilder()
            .fluidInputs(fraction.get(1000))
            .fluidInputs(fluid('hot_hp_hydrogen') * 1000)
            .fluidOutputs(fraction.getSeverelyHydro(1000))
            .duration(200)
            .EUt(Globals.voltAmps[1] * 2)
            .buildAndRegister()
            
            CRACKER.recipeBuilder()
            .fluidInputs(fraction.get(1000))
            .fluidInputs(fluid('steam') * 1000)
            .fluidOutputs(fraction.getLightlySteam(1000))
            .duration(200)
            .EUt(Globals.voltAmps[1] * 2)
            .buildAndRegister()
            
            CRACKER.recipeBuilder()
            .fluidInputs(fraction.get(1000))
            .fluidInputs(fluid('hot_hp_steam') * 1000)
            .fluidOutputs(fraction.getSeverelySteam(1000))
            .duration(200)
            .EUt(Globals.voltAmps[1] * 2)
            .buildAndRegister()
            
        }

    }

}

EBF.recipeBuilder()
.fluidInputs(fluid('oxygen') * 1000)
.inputs(metaitem('spent_cracking_catalyst') * 4)
.fluidOutputs(fluid('flue_gas') * 1000)
.outputs(metaitem('cracking_catalyst') * 4)
.blastFurnaceTemp(1200)
.duration(100)
.EUt(Globals.voltAmps[1] * 2)
.buildAndRegister()

// Cracked Distillation

// Kerosene

DT.recipeBuilder()
.fluidInputs(fractions.kerosene.getLightlyHydro(1000))
.fluidOutputs(fluid('gasoline') * 600)
.fluidOutputs(fluid('naphtha') * 100)
.fluidOutputs(fluid('butane') * 100)
.fluidOutputs(fluid('propane') * 100)
.fluidOutputs(fluid('ethane') * 75)
.fluidOutputs(fluid('methane') * 75)
.duration(400)
.EUt(Globals.voltAmps[1] * 2)
.buildAndRegister()

DT.recipeBuilder()
.fluidInputs(fractions.kerosene.getSeverelyHydro(1000))
.fluidOutputs(fluid('gasoline') * 200)
.fluidOutputs(fluid('naphtha') * 250)
.fluidOutputs(fluid('butane') * 300)
.fluidOutputs(fluid('propane') * 300)
.fluidOutputs(fluid('ethane') * 175)
.fluidOutputs(fluid('methane') * 175)
.duration(400)
.EUt(Globals.voltAmps[1] * 2)
.buildAndRegister()

DT.recipeBuilder()
.fluidInputs(fractions.kerosene.getLightlySteam(1000))
.fluidOutputs(fluid('gasoline') * 300)
.fluidOutputs(fluid('naphtha') * 50)
.fluidOutputs(fluid('toluene') * 25)
.fluidOutputs(fluid('benzene') * 125)
.fluidOutputs(fluid('butene') * 25)
.fluidOutputs(fluid('butadiene') * 15)
.fluidOutputs(fluid('propane') * 3)
.fluidOutputs(fluid('propene') * 30)
.fluidOutputs(fluid('ethane') * 5)
.fluidOutputs(fluid('ethylene') * 50)
.fluidOutputs(fluid('methane') * 50)
.duration(400)
.EUt(Globals.voltAmps[1] * 2)
.buildAndRegister()

DT.recipeBuilder()
.fluidInputs(fractions.kerosene.getSeverelySteam(1000))
.fluidOutputs(fluid('gasoline') * 100)
.fluidOutputs(fluid('naphtha') * 125)
.fluidOutputs(fluid('toluene') * 80)
.fluidOutputs(fluid('benzene') * 125)
.fluidOutputs(fluid('butene') * 80)
.fluidOutputs(fluid('butadiene') * 50)
.fluidOutputs(fluid('propane') * 10)
.fluidOutputs(fluid('propene') * 100)
.fluidOutputs(fluid('ethane') * 15)
.fluidOutputs(fluid('ethylene') * 150)
.fluidOutputs(fluid('methane') * 150)
.duration(400)
.EUt(Globals.voltAmps[1] * 2)
.buildAndRegister()

// Naphtha :concernium:

DT.recipeBuilder()
.fluidInputs(fractions.naphtha.getLightlyHydro(1000))
.fluidOutputs(fluid('butane') * 800)
.fluidOutputs(fluid('propane') * 300)
.fluidOutputs(fluid('ethane') * 250)
.fluidOutputs(fluid('methane') * 250)
.duration(400)
.EUt(Globals.voltAmps[1] * 2)
.buildAndRegister()

DT.recipeBuilder()
.fluidInputs(fractions.naphtha.getSeverelyHydro(1000))
.fluidOutputs(fluid('butane') * 125)
.fluidOutputs(fluid('propane') * 125)
.fluidOutputs(fluid('ethane') * 1500)
.fluidOutputs(fluid('methane') * 1500)
.duration(400)
.EUt(Globals.voltAmps[1] * 2)
.buildAndRegister()

DT.recipeBuilder()
.fluidInputs(fractions.naphtha.getLightlySteam(1000))
.fluidOutputs(fluid('kerosene') * 75)
.fluidOutputs(fluid('gasoline') * 150)
.fluidOutputs(fluid('toluene') * 40)
.fluidOutputs(fluid('benzene') * 150)
.fluidOutputs(fluid('c_five_fraction') * 150)
.fluidOutputs(fluid('butene') * 80)
.fluidOutputs(fluid('butadiene') * 150)
.fluidOutputs(fluid('propane') * 15)
.fluidOutputs(fluid('propene') * 200)
.fluidOutputs(fluid('ethane') * 35)
.fluidOutputs(fluid('ethylene') * 200)
.fluidOutputs(fluid('methane') * 200)
.duration(400)
.EUt(Globals.voltAmps[1] * 2)
.buildAndRegister()

DT.recipeBuilder()
.fluidInputs(fractions.naphtha.getSeverelySteam(1000))
.fluidOutputs(fluid('kerosene') * 25)
.fluidOutputs(fluid('gasoline') * 50)
.fluidOutputs(fluid('toluene') * 20)
.fluidOutputs(fluid('benzene') * 100)
.fluidOutputs(fluid('c_five_fraction') * 350)
.fluidOutputs(fluid('butene') * 50)
.fluidOutputs(fluid('butadiene') * 50)
.fluidOutputs(fluid('propane') * 15)
.fluidOutputs(fluid('propene') * 300)
.fluidOutputs(fluid('ethane') * 65)
.fluidOutputs(fluid('ethylene') * 500)
.fluidOutputs(fluid('methane') * 500)
.duration(400)
.EUt(Globals.voltAmps[1] * 2)
.buildAndRegister()

// Gasoline 

DT.recipeBuilder()
.fluidInputs(fractions.gasoline.getLightlyHydro(1000))
.fluidOutputs(fluid('naphtha') * 800)
.fluidOutputs(fluid('butane') * 150)
.fluidOutputs(fluid('propane') * 200)
.fluidOutputs(fluid('ethane') * 125)
.fluidOutputs(fluid('methane') * 125)
.duration(400)
.EUt(Globals.voltAmps[1] * 2)
.buildAndRegister()

DT.recipeBuilder()
.fluidInputs(fractions.gasoline.getSeverelyHydro(1000))
.fluidOutputs(fluid('naphtha') * 200)
.fluidOutputs(fluid('butane') * 125)
.fluidOutputs(fluid('propane') * 125)
.fluidOutputs(fluid('ethane') * 1500)
.fluidOutputs(fluid('methane') * 1500)
.duration(400)
.EUt(Globals.voltAmps[1] * 2)
.buildAndRegister()

DT.recipeBuilder()
.fluidInputs(fractions.gasoline.getLightlySteam(1000))
.fluidOutputs(fluid('kerosene') * 150)
.fluidOutputs(fluid('naphtha') * 400)
.fluidOutputs(fluid('toluene') * 40)
.fluidOutputs(fluid('benzene') * 200)
.fluidOutputs(fluid('butene') * 75)
.fluidOutputs(fluid('butadiene') * 60)
.fluidOutputs(fluid('propane') * 20)
.fluidOutputs(fluid('propene') * 150)
.fluidOutputs(fluid('ethane') * 10)
.fluidOutputs(fluid('ethylene') * 50)
.fluidOutputs(fluid('methane') * 50)
.duration(400)
.EUt(Globals.voltAmps[1] * 2)
.buildAndRegister()

DT.recipeBuilder()
.fluidInputs(fractions.gasoline.getSeverelySteam(1000))
.fluidOutputs(fluid('kerosene') * 50)
.fluidOutputs(fluid('naphtha') * 100)
.fluidOutputs(fluid('toluene') * 30)
.fluidOutputs(fluid('benzene') * 150)
.fluidOutputs(fluid('butene') * 65)
.fluidOutputs(fluid('butadiene') * 50)
.fluidOutputs(fluid('propane') * 50)
.fluidOutputs(fluid('propene') * 250)
.fluidOutputs(fluid('ethane') * 50)
.fluidOutputs(fluid('ethylene') * 250)
.fluidOutputs(fluid('methane') * 250)
.duration(400)
.EUt(Globals.voltAmps[1] * 2)
.buildAndRegister()

fractions.each { _, fraction -> {
        if (fraction.isUpgradable) {
            CRACKER.recipeBuilder()
            .fluidInputs(fraction.get(1000))
            .inputs(metaitem('cracking_catalyst'))
            .fluidOutputs(fraction.getUpgradedMix(1000))
            .duration(200)
            .EUt(Globals.voltAmps[1] * 2)
            .buildAndRegister()

            CENTRIFUGE.recipeBuilder()
            .fluidInputs(fraction.getUpgradedMix(1000))
            .fluidOutputs(fraction.getUpgraded(1000))
            .outputs(metaitem('spent_cracking_catalyst'))
            .duration(160)
            .EUt(Globals.voltAmps[1])
            .buildAndRegister()
        }
    }
}

CRACKER.recipeBuilder()
        .fluidInputs(fluid('lubricating_oil') * 1000)
        .inputs(metaitem('cracking_catalyst'))
        .fluidOutputs(fluid('upgraded_lubricating_oil_mix') * 1000)
        .duration(200)
        .EUt(Globals.voltAmps[1] * 2)
        .buildAndRegister()

CENTRIFUGE.recipeBuilder()
        .fluidInputs(fluid('upgraded_lubricating_oil_mix') * 1000)
        .fluidOutputs(fluid('sulfuric_heavy_fuel_oil') * 1000)
        .outputs(metaitem('spent_cracking_catalyst'))
        .duration(160)
        .EUt(Globals.voltAmps[1])
        .buildAndRegister()

// BTEX

REFORMER.recipeBuilder()
.fluidInputs(fluid('naphtha') * 1000)
.fluidInputs(fluid('hydrogen') * 1000)
.notConsumable(ore('catalystBedSupportedPlatinum'))
.fluidOutputs(fluid('naphtha_reformate') * 1000)
.fluidOutputs(fluid('hydrogen') * )
.duration(25)
.EUt(Globals.voltAmps[3])
.buildAndRegister()

CENTRIFUGE.recipeBuilder()
.fluidInputs(fluid('naphtha_reformate') * 1000)
.fluidInputs(fluid('furfural') * 100)
.fluidOutputs(fluid('btex_extract') * 1000)
.duration(100)
.EUt(Globals.voltAmps[1])
.buildAndRegister()

CENTRIFUGE.recipeBuilder()
.fluidInputs(fluid('btex_extract') * 1000)
.fluidInputs(fluid('steam') * 1000)
.fluidOutputs(fluid('furfural') * 100)
.fluidOutputs(fluid('btex') * 1000)
.duration(100)
.EUt(Globals.voltAmps[1])
.buildAndRegister()

DT.recipeBuilder()
.fluidInputs(fluid('btex') * 1000)
.fluidOutputs(fluid('xylene') * 400)
.fluidOutputs(fluid('ethylbenzene') * 50)
.fluidOutputs(fluid('toluene') * 400)
.fluidOutputs(fluid('benzene') * 150)
.duration(100)
.EUt(Globals.voltAmps[1])
.buildAndRegister()

// XYLENE SEPARATION
DT.recipeBuilder()
.fluidInputs(fluid('xylene') * 1000)
.fluidOutputs(fluid('ortho_xylene') * 200)
.fluidOutputs(fluid('meta_para_xylene_mixture') * 800)
.duration(100)
.EUt(Globals.voltAmps[1] * 2)
.buildAndRegister()

CRYSTALLIZER.recipeBuilder()
.fluidInputs(fluid('meta_para_xylene_mixture') * 4000)
.outputs(metaitem('dustParaXylene'))
.fluidOutputs(fluid('meta_xylene') * 3000)
.duration(100)
.EUt(Globals.voltAmps[1])
.buildAndRegister()

EXTRACTOR.recipeBuilder()
.inputs(ore('dustParaXylene'))
.fluidOutputs(fluid('para_xylene') * 1000)
.duration(5)
.EUt(30)
.buildAndRegister()

BR.recipeBuilder()
.inputs(ore('dustDicobaltOctacarbonyl') * 18)
.fluidInputs(fluid('hydrogen') * 2000)
.fluidInputs(fluid('carbon_monoxide') * 1000)
.fluidInputs(fluid('ethylene') * 1000)
.fluidOutputs(fluid('propanal_mixture') * 1000)
.EUt(Globals.voltAmps[3])
.duration(80)
.buildAndRegister()

DISTILLERY.recipeBuilder()
.fluidInputs(fluid('propanal_mixture') * 1000)
.outputs(metaitem('dustDicobaltOctacarbonyl') * 18)
.fluidOutputs(fluid('propionaldehyde') * 800)
.EUt(Globals.voltAmps[3])
.duration(80)
.buildAndRegister()

FBR.recipeBuilder()
.fluidInputs(fluid('propionaldehyde') * 50)
.fluidInputs(fluid('hydrogen') * 100)
.notConsumable(metaitem('catalystBedPlatinum'))
.fluidOutputs(fluid('n_propanol') * 50)
.EUt(Globals.voltAmps[3])
.duration(4)
.buildAndRegister()

FBR.recipeBuilder()
.notConsumable(metaitem('catalystBedAlumina'))
.fluidInputs(fluid('ammonia') * 50)
.fluidInputs(fluid('n_propanol') * 150)
.fluidOutputs(fluid('tripropylamine') * 50)
.fluidOutputs(fluid('water') * 150)
.duration(5)
.EUt(120)
.buildAndRegister();

BR.recipeBuilder()
.notConsumable(metaitem('emitter.lv'))
.notConsumable(fluid('hydrogen_peroxide_solution') * 50)
.fluidInputs(fluid('hydrobromic_acid') * 1000)
.fluidInputs(fluid('propene') * 1000)
.fluidOutputs(fluid('n_bromopropane') * 1000)
.fluidOutputs(fluid('water') * 1000)
.duration(5)
.EUt(120)
.buildAndRegister();

BR.recipeBuilder()
.fluidInputs(fluid('n_bromopropane') * 1000)
.fluidInputs(fluid('tripropylamine') * 1000)
.outputs(metaitem('dustTetrapropylammoniumBromide'))
.duration(5)
.EUt(120)
.buildAndRegister();

LCR.recipeBuilder()
.inputs(ore('dustSiliconDioxide') * 6)
.inputs(ore('dustAluminiumSulfate') * 51)
.inputs(ore('dustSodiumHydroxide'))
.inputs(ore('dustTinyTetrapropylammoniumBromide'))
.fluidInputs(fluid('ethanol') * 100)
.fluidInputs(fluid('demineralized_water') * 1800)
.outputs(metaitem('dustZsmFive'))
.duration(500)
.EUt(480)
.buildAndRegister();

REFORMER.recipeBuilder()
.notConsumable(metaitem('catalystBedZsmFive'))
.fluidInputs(fluid('meta_xylene') * 1000)
.fluidOutputs(fluid('para_xylene') * 1000)
.duration(60)
.EUt(Globals.voltAmps[1] * 2)
.buildAndRegister()

// Steam-cracked naphtha C5-fraction separation

    // Dimerization of CPD
    
    FLUID_HEATER.recipeBuilder()
        .fluidInputs(fluid('c_five_fraction') * 1000)
        .fluidOutputs(fluid('dimerized_c_five_fraction') * 875)
        .duration(60)
        .EUt(Globals.voltAmps[1])
        .buildAndRegister()

    DT.recipeBuilder()
        .fluidInputs(fluid('dimerized_c_five_fraction') * 875)
        .fluidOutputs(fluid('dicyclopentadiene') * 125)
        .fluidOutputs(fluid('pentane') * 375)
        .fluidOutputs(fluid('isoprene') * 375)
        .duration(60)
        .EUt(Globals.voltAmps[1])
        .buildAndRegister()

    FLUID_HEATER.recipeBuilder()
        .fluidInputs(fluid('dicyclopentadiene') * 1000)
        .fluidOutputs(fluid('cyclopentadiene') * 2000)
        .duration(60)
        .EUt(Globals.voltAmps[1])
        .buildAndRegister()
*/