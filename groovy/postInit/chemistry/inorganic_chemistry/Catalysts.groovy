import globals.Globals


MIXER = recipemap('mixer')
SINTERING_OVEN = recipemap('sintering_oven')

// Alumina supports
MIXER.recipeBuilder()
    .inputs(ore('dustAmmoniumHexachloroplatinate') * 17)
    .fluidInputs(fluid('phosphoric_acid') * 1000)
    .fluidOutputs(fluid('platinum_precursor_solution') * 1000)
    .duration(100)
    .EUt(Globals.voltAmps[3])
    .buildAndRegister()

SINTERING_OVEN.recipeBuilder()
    .inputs(ore('dustAlumina') * 5)
    .fluidInputs(fluid('platinum_precursor_solution') * 1000)
    .outputs(metaitem('dustSupportedPlatinum'))
    .fluidOutputs(fluid('phosphoric_acid') * 1000)
    .duration(100)
    .EUt(Globals.voltAmps[3])
    .buildAndRegister()

MIXER.recipeBuilder()
    .inputs(ore('dustPalladiumChloride') * 3)
    .fluidInputs(fluid('phosphoric_acid') * 1000)
    .fluidOutputs(fluid('palladium_precursor_solution') * 1000)
    .duration(100)
    .EUt(Globals.voltAmps[3])
    .buildAndRegister()

SINTERING_OVEN.recipeBuilder()
    .inputs(ore('dustAlumina') * 5)
    .fluidInputs(fluid('palladium_precursor_solution') * 1000)
    .outputs(metaitem('dustSupportedPalladium'))
    .fluidOutputs(fluid('phosphoric_acid') * 1000)
    .duration(100)
    .EUt(Globals.voltAmps[3])
    .buildAndRegister()

SINTERING_OVEN.recipeBuilder()
    .inputs(ore('dustAlumina') * 5)
    .fluidInputs(fluid('nickel_nitrate_solution') * 1000)
    .outputs(metaitem('dustSupportedNickel'))
    .fluidOutputs(fluid('dense_steam') * 1000)
    .duration(100)
    .EUt(Globals.voltAmps[1])
    .buildAndRegister()

ROASTER.recipeBuilder()
    .inputs(ore('dustSupportedNickel'))
    .fluidInputs(fluid('hydrogen_sulfide') * 100)
    .outputs(metaitem('dustHydrotreatingCatalyst'))
    .duration(100)
    .EUt(Globals.voltAmps[1])
    .buildAndRegister()

/* Isomerization catalysts

BR.recipeBuilder()
    .inputs(ore('dustAlumina') * 5)
    .fluidInputs(fluid('hydrogen_chloride') * 100)
    .outputs(metaitem('dustChloridedAlumina'))
    .duration(100)
    .EUt(Globals.voltAmps[1])
    .buildAndRegister()

BR.recipeBuilder()
    .inputs(ore('dustZirconiumDioxide') * 3)
    .fluidInputs(fluid('dustAluminiumSulfate'))
    .outputs(metaitem('dustSulfatedMetalOxide'))
    .duration(100)
    .EUt(Globals.voltAmps[1])
    .buildAndRegister()

*/

// Zeolites

DISTILLERY.recipeBuilder()
    .fluidInputs(fluid('sodium_silicate_solution') * 1000)
    .outputs(metaitem('dustSodiumSilicate') * 6)
    .fluidOutputs(fluid('water') * 1000)
    .duration(20)
    .EUt(30)
    .buildAndRegister()

BR.recipeBuilder()
    .fluidInputs(fluid('sodium_hydroxide_solution') * 2000)
    .fluidInputs(fluid('dense_steam') * 1000)
    .inputs(ore('dustSiliconDioxide') * 3)
    .fluidOutputs(fluid('diluted_sodium_silicate_solution') * 4000)
    .duration(200)
    .EUt(30)
    .buildAndRegister()

DISTILLERY.recipeBuilder()
    .fluidInputs(fluid('sodium_aluminate_solution') * 1500)
    .fluidOutputs(fluid('water') * 1500)
    .outputs(metaitem('dustSodiumAluminate') * 4)
    .duration(160)
    .EUt(30)
    .buildAndRegister()

BR.recipeBuilder()
    .fluidInputs(fluid('sodium_hydroxide_solution') * 2000)
    .inputs(ore('dustAnyPurityAluminium') * 2)
    .fluidOutputs(fluid('hydrogen') * 6000)
    .outputs(metaitem('dustSodiumAluminate') * 8)
    .duration(200)
    .EUt(30)
    .buildAndRegister()

AUTOCLAVE.recipeBuilder()
    .fluidInputs(fluid('diluted_sodium_silicate_solution') * 4000)
    .inputs(ore('dustSodiumAluminate') * 4)
    .fluidOutputs(fluid('raw_molecular_sieve') * 4000)
    .duration(180)
    .EUt(30)
    .buildAndRegister()

AUTOCLAVE.recipeBuilder()
    .fluidInputs(fluid('sodium_silicate_solution') * 1000)
    .inputs(ore('dustSodiumAluminate') * 4)
    .fluidOutputs(fluid('raw_molecular_sieve') * 4000)
    .duration(180)
    .EUt(30)
    .buildAndRegister()

DISTILLATION_TOWER.recipeBuilder()
    .fluidInputs(fluid('diluted_sodium_silicate_solution') * 1000)
    .fluidOutputs(fluid('water') * 750)
    .fluidOutputs(fluid('sodium_silicate_solution') * 250)
    .duration(200)
    .EUt(30)
    .buildAndRegister()

DRYER.recipeBuilder()
    .fluidInputs(fluid('raw_molecular_sieve') * 4000)
    .outputs(metaitem('dustMolecularSieve') * 10)
    .duration(400)
    .EUt(30)
    .buildAndRegister()

ALLOY_SMELTER.recipeBuilder()
    .inputs(ore('dustMolecularSieve') * 1)
    .inputs(ore('dustClay') * 1)
    .outputs(metaitem('cracking_catalyst') * 1)
    .duration(100)
    .EUt(60)
    .buildAndRegister()